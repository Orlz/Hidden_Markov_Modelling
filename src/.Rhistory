# Plot
plot_CR_b4 <- ggplot(battle_4) + theme_classic() +
geom_line(color=colour_WSLSP, aes(trial, CR_WSLSP)) +
geom_text(aes(x = 100, y = 1.0, label = "Probabilistic", colour=	CR_WSLSP)) +
geom_line(color= colour_WSLSB, aes(trial, CR_WSLSB)) +
geom_text(aes(x = 100, y = 0.2, label = "Basic", colour=	CR_WSLSB))+
labs(title = "Battle 4: Agent performance across trials",
x = "Trials", y = "Cumulative Rate") +
theme(plot.title = element_text(hjust = 0.5, size = 14)) +
theme(legend.position="none")
plot_CR_b4
WSLSP_Mismatcher <- function(prevChoice, memory, Feedback){
# Agent wins the previous round
if (Feedback == 0){
memory = 0
choice = prevChoice
# Agent losses previous round
} else if (Feedback == 1){
memory <- memory + 1
agent_behaviour <- check_memory(memory, prevChoice)
memory <- agent_behaviour[1]
choice <- agent_behaviour[2]
}
# Noise clause with rate equivalent to selected noise parameter
if (rbinom(1,1, noise)==1){choice <- rbinom(1,1,.5)
memory <- 0}
# return vector of memory and choice
output_vector <- c(memory, choice)
return(output_vector) # this time we return a list, not the individual choice
}
for (agent in seq(agents)){
# -- Define our 2 agent types and memory vector --
copycat <- rep(NA, trials)
WSLSP <-  rep(NA, trials)
memory_w <- rep(NA, trials)
# -- Define agent's first choices --
copycat[1] <- rbinom(1, 1, 0.5)
WSLSP[1] <- rbinom(1, 1, 0.5)
memory_w[1] <- 1
# -- Loop through trials --
for (i in 2:trials){
# set the copycat memory variables for 2nd round
if (i == 2) {
memory_c <- rbinom(1, 1, 0.5)
memory_w[i] <- 1 }
else {
memory_c <- oppChoice
memory_w[i] <- memory_w[i-1]
}
# set the feedback for previous round
if(WSLSP[i-1] == copycat[i-1]){
feedback = 1
memory_w[i] <- 0}
else{feedback == 0}
# assign the choices of the agents in this round
# WSLSP-mismatcher agent
agent_variables <- WSLSP_Mismatcher(WSLSP[i-1], memory_w[i], feedback)
memory_w[i] <- agent_variables[1]
WSLSP[i] <- agent_variables[2]
#copycat
oppChoice <- WSLSP[i]
copycat[i] <- CopycatAgent(memory_c)
}
# create dataframe of results
temp <- tibble(copycat, WSLSP, memory_w, trial = seq(trials),
feedback = as.numeric(copycat==WSLSP), agent, rate)
if (agent==1){battle_5 <- temp} else {battle_5 <- bind_rows(battle_5, temp)}
}
# Here we reverse the scenario, so that feedback of 0 is seen as a win to the WSLSP agent
battle_5$CopyCat_matcher[battle_5$feedback == 0] <- "Lose"
battle_5$CopyCat_matcher[battle_5$feedback == 1] <- "Win"
battle_5$CopyCat_matcher <- as.factor(battle_5$CopyCat_matcher)
# Calculate number of wins and losses to check
sum(battle_5$CopyCat_matcher == "Win")  # 9729 wins
sum(battle_5$CopyCat_matcher == "Lose") # 2271 wins
# Create placeholder df for putting labels on the graph
label_adjustments_b5CC <- battle_5
label_adjustments_b5CC$feedback[label_adjustments_b5CC$CopyCat_matcher == "Lose"] <- 1
label_adjustments_b5CC <- label_adjustments_b5CC %>% group_by(CopyCat_matcher) %>%
summarise(total = sum(feedback))
# Plot these in a readable way
ggplot(battle_5, aes(x=CopyCat_matcher, fill = CopyCat_matcher)) + theme_classic() + geom_histogram(stat = "count") +
labs(title = "Battle 5: CopyCat (matcher) 'v' WSLSP (mismatcher)",
x = "Results", y = "Count") +
theme(plot.title = element_text(hjust = 0.5, size = 14)) +
theme(legend.position="none") +
scale_fill_manual(values=c('indianred', '#00C19C')) +
geom_text(data=label_adjustments_b5CC,
aes(x=CopyCat_matcher,y=total,label=total,fill=NULL), nudge_y = 400)
# Here we reverse the scenario, so that feedback of 0 is seen as a win to the WSLSP agent
battle_5$WSLSP_mismatcher[battle_5$feedback == 0] <- "Win"
battle_5$WSLSP_mismatcher[battle_5$feedback == 1] <- "Lose"
battle_5$WSLSP_mismatcher <- as.factor(battle_5$WSLSP_mismatcher)
# Calculate number of wins and losses to check
sum(battle_5$WSLSP_mismatcher == "Win")  # 2251 wins
sum(battle_5$WSLSP_mismatcher == "Lose") # 9747 wins
# Create placeholder df for putting labels on the graph
label_adjustments_b5 <- battle_5
label_adjustments_b5$feedback[label_adjustments_b5$WSLSP_mismatcher == "Win"] <- 1
label_adjustments_b5 <- label_adjustments_b5 %>% group_by(WSLSP_mismatcher) %>%
summarise(total = sum(feedback))
# Plot these in a readable way
ggplot(battle_5, aes(x=WSLSP_mismatcher, fill = WSLSP_mismatcher)) + theme_classic() + geom_histogram(stat = "count") +
labs(title = "Battle 5: WSLSP Mismatcher Perspective",
x = "Results", y = "Count") +
theme(plot.title = element_text(hjust = 0.5, size = 14)) +
theme(legend.position="none") +
scale_fill_manual(values=c('indianred', '#00C19C')) +
geom_text(data=label_adjustments_b5,
aes(x=WSLSP_mismatcher,y=total,label=total,fill=NULL), nudge_y = 400)
# Calculate cumulative rate for each agent set
battle_5$CR_CopyCat <- cumsum(battle_5$feedback) / seq_along(battle_5$feedback)
battle_5$CR_WSLSP<- cumsum(1-battle_5$feedback) / seq_along(battle_5$feedback)
# stats
mean(battle_5$CR_WSLSP)
# Plot
plot_CR_b5 <- ggplot(battle_5) + theme_classic() +
geom_line(color=colour_copycat, aes(trial, CR_CopyCat)) +
geom_text(aes(x = 100, y = 1.0, label = "CopyCat", colour=	CR_CopyCat)) +
geom_line(color= colour_WSLSP, aes(trial, CR_WSLSP)) +
geom_text(aes(x = 100, y = 0.3, label = "WSLSP", colour=	CR_WSLSP))+
labs(title = "Battle 5",
x = "Trials", y = "Cumulative Rate") +
theme(plot.title = element_text(hjust = 0.5, size = 14)) +
theme(legend.position="none")
plot_CR_b5
for (agent in seq(agents)){
# -- Define our 2 agent types and memory vector --
copycat <- rep(NA, trials)
WSLSP <-  rep(NA, trials)
memory_w <- rep(NA, trials)
# -- Define agent's first choices --
copycat[1] <- rbinom(1, 1, 0.5)
WSLSP[1] <- rbinom(1, 1, 0.5)
memory_w[1] <- 1
# -- Loop through trials --
for (i in 2:trials){
# set the copycat memory variables for 2nd round
if (i == 2) {
memory_c <- rbinom(1, 1, 0.5)
memory_w[i] <- memory_w[i-1] + 1}
else {
memory_c <- oppChoice
memory_w[i] <- memory_w[i-1]
}
# set the feedback for previous round
if(WSLSP[i-1] == copycat[i-1]){
feedback = 1
memory_w[i] <- 0}
else{feedback == 0}
# assign the choices of the agents in this round
# WSLSP
agent_variables <- WSLSP_Agent(WSLSP[i-1], memory_w[i], feedback)
memory_w[i] <- agent_variables[1]
WSLSP[i] <- agent_variables[2]
#copycat
oppChoice <- WSLSP[i]
copycat[i] <- CopycatAgent(memory_c)
}
# create dataframe of results
temp <- tibble(copycat, WSLSP, memory_w, trial = seq(trials),
feedback = as.numeric(copycat==WSLSP), agent, rate)
if (agent==1){battle_6 <- temp} else {battle_6 <- bind_rows(battle_6, temp)}
}
# Now it depends on who is the matcher. If we first consider that the WSLS'er is the matcher:
battle_6$WSLSP_matcher[battle_6$feedback == 1] <- "Win"
battle_6$WSLSP_matcher[battle_6$feedback == 0] <- "Lose"
battle_6$WSLSP_matcher <- as.factor(battle_6$WSLSP_matcher)
# Calculate number of wins and losses to check
sum(battle_6$WSLSP_matcher == "Win")  # 10787 wins
sum(battle_6$WSLSP_matcher == "Lose") # 1213 wins
# Create placeholder df for putting labels on the graph
label_adjustments_b6 <- battle_6
label_adjustments_b6$feedback[label_adjustments_b6$WSLSP_matcher == "Lose"] <- 1
label_adjustments_b6 <- label_adjustments_b6 %>% group_by(WSLSP_matcher) %>%
summarise(total = sum(feedback))
# Plot these in a readable way
ggplot(battle_6, aes(x=WSLSP_matcher, fill = WSLSP_matcher)) + theme_classic() + geom_histogram(stat = "count") +
labs(title = "Battle 6: Win-Stay-Lose-Shift-Probabilistic wins and losses as matcher",
x = "Results", y = "Count") +
theme(plot.title = element_text(hjust = 0.5, size = 14)) +
theme(legend.position="none") +
scale_fill_manual(values=c('indianred', '#00C19C')) +
geom_text(data=label_adjustments_b6,
aes(x=WSLSP_matcher,y=total,label=total,fill=NULL), nudge_y = 400)
#Calculate cumulative rate for each agent set
battle_6$CR_WSLSP <- cumsum(battle_6$feedback) / seq_along(battle_6$feedback)
battle_6$CR_copycat <- cumsum(1- battle_6$feedback) / seq_along(battle_6$feedback)
# Plot
plot_CR_b6 <- ggplot(battle_6) + theme_classic() +
geom_line(color=colour_WSLSP, aes(trial, CR_WSLSP)) +
geom_text(aes(x = 100, y = 1.0, label = "WSLSP", colour=	CR_WSLSP)) +
geom_line(color= colour_copycat, aes(trial, CR_copycat)) +
geom_text(aes(x = 100, y = 0.2, label = "CopyCat", colour=	CR_copycat))+
labs(title = "Battle 6: Agent performance across trials",
x = "Trials", y = "Cumulative Rate") +
theme(plot.title = element_text(hjust = 0.5, size = 14)) +
theme(legend.position="none")
plot_CR_b6
## --- COPYCAT AGENTS ---
# --  CopyCat as the Matcher --
# # -- simplifying plots --
plot_b1 <- ggplot(battle_1) + theme_classic() +
geom_line(color=colour_copycat, aes(trial, CR_copycat)) +
geom_text(aes(x = 100, y = 0.7, label = "CopyCat")) +
geom_line(color= colour_random, aes(trial, CR_random)) +
geom_text(aes(x = 100, y = 0.3, label = "Random"))+
labs(title = "Battle 1",
x = "Trials", y = "Cumulative Rate") +
theme(plot.title = element_text(hjust = 0.5, size = 14)) +
theme(legend.position="none")
plot_b1
plot_b2 <- ggplot(battle_2) + theme_classic() +
geom_line(color="turquoise4", aes(trial, CR_copycat)) +
geom_text(aes(x = 100, y = 0.65, label = "CopyCat")) +
geom_line(color='lightsteelblue', aes(trial, CR_WSLSB)) +
geom_text(aes(x = 100, y = 0.35, label = "WSLSB"))+
labs(title = "Battle 2",
x = "Trials", y = "Cumulative Rate") +
theme(plot.title = element_text(hjust = 0.5, size = 14)) +
theme(legend.position="none")
plot_b2
plot_b5 <- ggplot(battle_5) + theme_classic() +
geom_line(color=colour_copycat, aes(trial, CR_copycat)) +
geom_text(aes(x = 100, y = 0.95, label = "CopyCat")) +
geom_line(color= colour_WSLSP, aes(trial, CR_WSLSP)) +
geom_text(aes(x = 100, y = 0.3, label = "WSLSP"))+
labs(title = "Battle 5",
x = "Trials", y = "Cumulative Rate") +
theme(plot.title = element_text(hjust = 0.5, size = 14)) +
theme(legend.position="none")
plot_b5
View(battle_2)
View(battle_5)
## --- COPYCAT AGENTS ---
# --  CopyCat as the Matcher --
# # -- simplifying plots --
plot_b1 <- ggplot(battle_1) + theme_classic() +
geom_line(color=colour_copycat, aes(trial, CR_copycat)) +
geom_text(aes(x = 100, y = 0.7, label = "CopyCat")) +
geom_line(color= colour_random, aes(trial, CR_random)) +
geom_text(aes(x = 100, y = 0.3, label = "Random"))+
labs(title = "Battle 1",
x = "Trials", y = "Cumulative Rate") +
theme(plot.title = element_text(hjust = 0.5, size = 14)) +
theme(legend.position="none")
#plot_b1
plot_b2 <- ggplot(battle_2) + theme_classic() +
geom_line(color="turquoise4", aes(trial, CR_copycat)) +
geom_text(aes(x = 100, y = 0.65, label = "CopyCat")) +
geom_line(color='lightsteelblue', aes(trial, CR_WSLSB)) +
geom_text(aes(x = 100, y = 0.35, label = "WSLSB"))+
labs(title = "Battle 2",
x = "Trials", y = "Cumulative Rate") +
theme(plot.title = element_text(hjust = 0.5, size = 14)) +
theme(legend.position="none")
#plot_b2
plot_b5 <- ggplot(battle_5) + theme_classic() +
geom_line(color=colour_copycat, aes(trial, CR_CopyCat)) +
geom_text(aes(x = 100, y = 0.95, label = "CopyCat")) +
geom_line(color= colour_WSLSP, aes(trial, CR_WSLSP)) +
geom_text(aes(x = 100, y = 0.3, label = "WSLSP"))+
labs(title = "Battle 5",
x = "Trials", y = "Cumulative Rate") +
theme(plot.title = element_text(hjust = 0.5, size = 14)) +
theme(legend.position="none")
#plot_b5
# Plotting together
plot_b1 + plot_b2 + plot_b5
# CopyCat as mismatcher against random
CopyCat_mismatcher <- battle_1
CopyCat_mismatcher$CR_copycat <- cumsum(1-CopyCat_mismatcher$feedback) /
seq_along(CopyCat_mismatcher$feedback)
CopyCat_mismatcher$CR_random <- cumsum(CopyCat_mismatcher$feedback) /
seq_along(CopyCat_mismatcher$feedback)
# Plot
plot_b7<- ggplot(CopyCat_mismatcher) + theme_classic() +
geom_line(color=colour_copycat, aes(trial, CR_copycat)) +
geom_text(aes(x = 100, y = 0.3, label = "CopyCat")) +
geom_line(color= colour_random, aes(trial, CR_random)) +
geom_text(aes(x = 100, y = 0.7, label = "Random"))+
labs(title = "",
x = "Trials", y = "Cumulative Rate") +
theme(plot.title = element_text(hjust = 0.5, size = 14)) +
theme(legend.position="none")
#plot_b7
# Copycat as mismatcher against WSLSB
CopyCat_mismatcher2 <- battle_2
CopyCat_mismatcher2$CR_copycat <- cumsum(1-CopyCat_mismatcher2$feedback) /
seq_along(battle_1$feedback)
CopyCat_mismatcher2$CR_WSLSB <- cumsum(CopyCat_mismatcher2$feedback) /
seq_along(CopyCat_mismatcher2$feedback)
plot_b8 <- ggplot(CopyCat_mismatcher2) + theme_classic() +
geom_line(color="turquoise4", aes(trial, CR_copycat)) +
geom_text(aes(x = 100, y = 0.35, label = "CopyCat")) +
geom_line(color='lightsteelblue', aes(trial, CR_WSLSB)) +
geom_text(aes(x = 100, y = 0.65, label = "WSLSB"))+
labs(title = "",
x = "Trials", y = "Cumulative Rate") +
theme(plot.title = element_text(hjust = 0.5, size = 14)) +
theme(legend.position="none")
ggplot(battle_6) + theme_classic() +
geom_line(color=colour_WSLSP, aes(trial, CR_WSLSP)) +
geom_text(aes(x = 100, y = 0.9, label = "WSLSP")) +
geom_line(color= colour_copycat, aes(trial, CR_copycat)) +
geom_text(aes(x = 100, y = 0.3, label = "CopyCat"))+
labs(title = "Battle 6",
x = "Trials", y = "Cumulative Rate") +
theme(plot.title = element_text(hjust = 0.5, size = 14)) +
theme(legend.position="none")
# remove title from battle 6
plot_9 <- ggplot(battle_6) + theme_classic() +
geom_line(color=colour_WSLSP, aes(trial, CR_WSLSP)) +
geom_text(aes(x = 100, y = 0.9, label = "WSLSP")) +
geom_line(color= colour_copycat, aes(trial, CR_copycat)) +
geom_text(aes(x = 100, y = 0.3, label = "CopyCat"))+
labs(title = "",
x = "Trials", y = "Cumulative Rate") +
theme(plot.title = element_text(hjust = 0.5, size = 14)) +
theme(legend.position="none")
# Plot all together
plot_b7 + plot_b8 + plot_9
## --- WSLSP AGENTS ---
# --  WSLSP as the Matcher --
# -- simplifying plots --
plot_b3 <- ggplot(battle_3) + theme_classic() +
geom_line(color=colour_WSLSP, aes(trial, CR_WSLSP)) +
geom_text(aes(x = 100, y = 0.7, label = "WSLSP")) +
geom_line(color= colour_random, aes(trial, CR_random)) +
geom_text(aes(x = 100, y = 0.3, label = "Random"))+
labs(title = "Battle 3",
x = "Trials", y = "Cumulative Rate") +
theme(plot.title = element_text(hjust = 0.5, size = 14)) +
theme(legend.position="none")
plot_b3
plot_b4 <-ggplot(battle_4) + theme_classic() +
geom_line(color=colour_WSLSP, aes(trial, CR_WSLSP)) +
geom_text(aes(x = 100, y = 1.0, label = "WSLSP")) +
geom_line(color= colour_WSLSB, aes(trial, CR_WSLSB)) +
geom_text(aes(x = 100, y = 0.2, label = "WSLSB"))+
labs(title = "Battle 4",
x = "Trials", y = "Cumulative Rate") +
theme(plot.title = element_text(hjust = 0.5, size = 14)) +
theme(legend.position="none")
plot_b4
plot_b6 <- ggplot(battle_6) + theme_classic() +
geom_line(color=colour_WSLSP, aes(trial, CR_WSLSP)) +
geom_text(aes(x = 100, y = 0.9, label = "WSLSP")) +
geom_line(color= colour_copycat, aes(trial, CR_copycat)) +
geom_text(aes(x = 100, y = 0.3, label = "CopyCat"))+
labs(title = "Battle 6",
x = "Trials", y = "Cumulative Rate") +
theme(plot.title = element_text(hjust = 0.5, size = 14)) +
theme(legend.position="none")
plot_b6
# Plotting together
plot_b3 + plot_b4 + plot_b6
# stats
sd(battle_6$CR_copycat)
## --- WSLSP AGENTS ---
# --  WSLSP as the Matcher --
# -- simplifying plots --
plot_b3 <- ggplot(battle_3) + theme_classic() +
geom_line(color=colour_WSLSP, aes(trial, CR_WSLSP)) +
geom_text(aes(x = 100, y = 0.7, label = "WSLSP")) +
geom_line(color= colour_random, aes(trial, CR_random)) +
geom_text(aes(x = 100, y = 0.3, label = "Random"))+
labs(title = "Battle 3",
x = "Trials", y = "Cumulative Rate") +
theme(plot.title = element_text(hjust = 0.5, size = 14)) +
theme(legend.position="none")
plot_b3
plot_b4 <-ggplot(battle_4) + theme_classic() +
geom_line(color=colour_WSLSP, aes(trial, CR_WSLSP)) +
geom_text(aes(x = 100, y = 1.0, label = "WSLSP")) +
geom_line(color= colour_WSLSB, aes(trial, CR_WSLSB)) +
geom_text(aes(x = 100, y = 0.2, label = "WSLSB"))+
labs(title = "Battle 4",
x = "Trials", y = "Cumulative Rate") +
theme(plot.title = element_text(hjust = 0.5, size = 14)) +
theme(legend.position="none")
#plot_b4
plot_b6 <- ggplot(battle_6) + theme_classic() +
geom_line(color=colour_WSLSP, aes(trial, CR_WSLSP)) +
geom_text(aes(x = 100, y = 0.9, label = "WSLSP")) +
geom_line(color= colour_copycat, aes(trial, CR_copycat)) +
geom_text(aes(x = 100, y = 0.3, label = "CopyCat"))+
labs(title = "Battle 6",
x = "Trials", y = "Cumulative Rate") +
theme(plot.title = element_text(hjust = 0.5, size = 14)) +
theme(legend.position="none")
#plot_b6
# Plotting together
plot_b3 + plot_b4 + plot_b6
# stats
#sd(battle_6$CR_copycat)
# -- WSLSP (mismatcher) against Random (matcher) --
# using WSLSP_Mismatcher agent
for (agent in seq(agents)){
# -- Define our 2 agent types and memory vector --
random <- rep(NA, trials)
WSLSP <-  rep(NA, trials)
memory <- rep(NA, trials)
# -- Define agent's first choices --
random <- RandomAgent(seq(trials), rate)
WSLSP[1] <- rbinom(1, 1, 0.5)
memory[1] <- 1
# -- Loop through trials --
for (i in 2:trials){
# set the copycat memory variables for 2nd round
if (i == 2) {memory[i] <- 1 }
else {memory[i] <- memory[i-1]}
# set the feedback for previous round
if(WSLSP[i-1] == random[i-1]){ feedback = 1}
else{feedback == 0}
# assign the choices of the agents in this round
# WSLSP-mismatcher agent
agent_variables <- WSLSP_Mismatcher(WSLSP[i-1], memory[i], feedback)
memory[i] <- agent_variables[1]
WSLSP[i] <- agent_variables[2]
}
# create dataframe of results
temp <- tibble(WSLSP, random, memory, trial = seq(trials),
feedback = as.numeric(WSLSP==random), agent, rate)
if (agent==1){battle_10 <- temp} else {battle_10 <- bind_rows(battle_10, temp)}
}
# Results
battle_10$WSLSP_mismatcher[battle_10$feedback == 1] <- "Lose"
battle_10$WSLSP_mismatcher[battle_10$feedback == 0] <- "Win"
battle_10$WSLSP_mismatcher <- as.factor(battle_10$WSLSP_mismatcher)
# Calculate number of wins and losses to check
sum(battle_10$WSLSP_mismatcher == "Win")  # 5998 wins
sum(battle_10$WSLSP_mismatcher == "Lose") # 6002 losses
# Cumulative sum
battle_10$CR_WSLSP <- cumsum(1-battle_10$feedback) / seq_along(battle_10$feedback)
battle_10$CR_random<- cumsum(battle_10$feedback) / seq_along(battle_10$feedback)
# Plot
plot_10 <- ggplot(battle_10) + theme_classic() +
geom_line(color=colour_WSLSP, aes(trial, CR_WSLSP)) +
geom_text(aes(x = 100, y = 0.7, label = "WSLSP")) +
geom_line(color= colour_random, aes(trial, CR_random)) +
geom_text(aes(x = 100, y = 0.3, label = "Random"))+
labs(title = "",
x = "Trials", y = "Cumulative Rate") +
theme(plot.title = element_text(hjust = 0.5, size = 14)) +
theme(legend.position="none")
plot_10
# -- WSLSP 'v' WSLSB --
# using WSLSP_Mismatcher agent
for (agent in seq(agents)){
# -- Define our 2 agent types and memory vector --
WSLSP <-  rep(NA, trials)
WSLSB <- rep(NA, trials)
memory <- rep(NA, trials)
# -- Define agent's first choices --
WSLSP[1] <- rbinom(1, 1, 0.5)
memory[1] <- rbinom(1, 1, 0.5)
WSLSB[1] <- rbinom(1, 1, 0.5)
# -- Loop through trials --
for (i in 2:trials){
# set the memory variable
if (i == 2) {memory[i] <- 1}
else {memory[i] <- memory[i-1]}
# set the feedback for previous round
if(WSLSP[i-1] == WSLSB[i-1]) {
feedback = 1}
else {feedback = 0}
# assign the choices of the agents in this round
agent_variables <- WSLSP_Mismatcher(WSLSP[i-1], memory[i], feedback)
memory[i] <- agent_variables[1]
WSLSP[i] <- agent_variables[2]
WSLSB[i] <- WSLSB_Agent(prevChoice = WSLSB[i-1], feedback)
}
# create dataframe of results
temp <- tibble(WSLSP, WSLSB, memory, trial = seq(trials),
feedback = as.numeric(WSLSP==WSLSB), agent, rate)
if (agent==1){battle_11 <- temp} else {battle_11<- bind_rows(battle_11, temp)}
}
# Results
battle_11$WSLSP_mismatcher[battle_11$feedback == 1] <- "Lose"
battle_11$WSLSP_mismatcher[battle_11$feedback == 0] <- "Win"
battle_11$WSLSP_mismatcher <- as.factor(battle_11$WSLSP_mismatcher)
# Calculate number of wins and losses to check
sum(battle_11$WSLSP_mismatcher == "Win")  # 3264 wins
sum(battle_11$WSLSP_mismatcher == "Lose") # 8736 losses
# Cumulative sum
battle_11$CR_WSLSP <- cumsum(1-battle_11$feedback) / seq_along(battle_11$feedback)
battle_11$CR_WSLSB<- cumsum(battle_11$feedback) / seq_along(battle_11$feedback)
# Plot
plot_11 <- ggplot(battle_11) + theme_classic() +
geom_line(color=colour_WSLSP, aes(trial, CR_WSLSP)) +
geom_text(aes(x = 100, y = 0.35, label = "WSLSP")) +
geom_line(color= colour_WSLSB, aes(trial, CR_WSLSB)) +
geom_text(aes(x = 100, y = 0.9, label = "WSLSB"))+
labs(title = "",
x = "Trials", y = "Cumulative Rate") +
theme(plot.title = element_text(hjust = 0.5, size = 14)) +
theme(legend.position="none")
plot_11
# Take title out of plot 5
plot_12 <- ggplot(battle_5) + theme_classic() +
geom_line(color=colour_copycat, aes(trial, CR_CopyCat)) +
geom_text(aes(x = 100, y = 0.9, label = "CopyCat")) +
geom_line(color= colour_WSLSP, aes(trial, CR_WSLSP)) +
geom_text(aes(x = 100, y = 0.3, label = "WSLSP"))+
labs(title = "",
x = "Trials", y = "Cumulative Rate") +
theme(plot.title = element_text(hjust = 0.5, size = 14)) +
theme(legend.position="none")
plot_12
# Plot all together
plot_10 + plot_11 + plot_12
